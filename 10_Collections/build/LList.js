"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LList = void 0;
var Node = /** @class */ (function () {
    function Node(value, next) {
        this.value = value;
        this.next = next;
    }
    return Node;
}());
var LList = /** @class */ (function () {
    function LList(item) {
        this.root = null;
        this.tail = null;
        this.size = 0;
        if (Array.isArray(item)) {
            for (var i = 0; i < item.length; i++) {
                this.add(item[i]);
            }
        }
        else {
            for (var i = 0; i < item; i++) {
                this.add(undefined);
            }
        }
    }
    LList.prototype.add = function (value) {
        var node = new Node(value, null);
        if (this.tail) {
            this.tail.next = node;
        }
        if (!this.root) {
            this.root = node;
        }
        this.tail = node;
        this.size++;
    };
    LList.prototype.clear = function () {
        this.root = null;
        this.tail = null;
    };
    LList.prototype.contains = function (value) {
        var current = this.root;
        var index = 0;
        while (index <= this.size) {
            if (current.value === value) {
                return true;
            }
            if (current.value !== value) {
                if (current.next !== null) {
                    current = current.next;
                }
                else {
                    return false;
                }
            }
            index++;
        }
    };
    LList.prototype.get = function (index) {
        var counter = 0;
        var current = this.root;
        if (index < 0) {
            return -1;
        }
        if (index >= this.size) {
            return -1;
        }
        while (counter <= this.size) {
            if (counter === index) {
                return current.value;
            }
            current = current.next;
            counter++;
        }
    };
    LList.prototype.getSize = function () {
        var counter = 0;
        var current = this.root;
        while (current) {
            counter++;
            current = current.next;
        }
        return counter;
    };
    LList.prototype.halfReverse = function () {
        var arr = this.toArray();
        if (arr.length < 1) {
            return;
        }
        var half = Number((arr.length / 2).toFixed(0));
        var res = [];
        for (var i = half - 1; i < this.size; i++) {
            res[res.length] = arr[i];
        }
        for (var i = 0; i < half - 1; i++) {
            res[res.length] = arr[i];
        }
        this.clear();
        for (var i = 0; i < res.length; i++) {
            this.add(res[i]);
        }
    };
    LList.prototype.maxIndex = function () {
        var maxValue = this.root.value;
        var current = this.root;
        var counter = 0;
        var index = 0;
        while (current) {
            if (maxValue < current.value) {
                maxValue = current.value;
                index = counter;
            }
            counter++;
            current = current.next;
        }
        return index;
    };
    LList.prototype.maxValue = function () {
        var maxValue = this.root.value;
        var current = this.root;
        while (current) {
            if (maxValue < current.value) {
                maxValue = current.value;
            }
            current = current.next;
        }
        return maxValue;
    };
    LList.prototype.minIndex = function () {
        var minValue = this.root.value;
        var current = this.root;
        var counter = 0;
        var index = 0;
        while (current) {
            if (minValue > current.value) {
                minValue = current.value;
                index = counter;
            }
            counter++;
            current = current.next;
        }
        return index;
    };
    LList.prototype.minValue = function () {
        var minValue = this.root.value;
        var current = this.root;
        while (current) {
            if (minValue > current.value) {
                minValue = current.value;
            }
            current = current.next;
        }
        return minValue;
    };
    LList.prototype.print = function () {
        var current = this.root;
        while (current) {
            console.log(current.value);
            current = current.next;
        }
    };
    LList.prototype.remove = function (value) {
        var counter = 0;
        var current = this.root;
        var prev = null;
        while (counter < this.size) {
            if (current.value === value) {
                var result = current.value;
                if (current.next !== null) {
                    current.value = current.next.value;
                    current.next = current.next.next;
                }
                else {
                    if (prev !== null) {
                        prev.next = null;
                        this.tail = prev;
                    }
                    else {
                        this.root = null;
                        this.tail = null;
                    }
                }
                this.size--;
                if (this.size === 1) {
                    this.tail = null;
                }
                return result;
            }
            else {
                counter++;
                prev = current;
                current = current.next;
            }
        }
    };
    LList.prototype.removeAll = function (array) {
        var current = this.root;
        var prev = null;
        while (current) {
            if (array.includes(current.value)) {
                if (current.next !== null) {
                    current.value = current.next.value;
                    current.next = current.next.next;
                }
                else {
                    if (prev === null) {
                        this.root = null;
                        this.tail = null;
                        current = null;
                    }
                    if (prev !== null) {
                        prev.next = null;
                        current = prev;
                    }
                }
            }
            else {
                prev = current;
                current = current.next;
            }
        }
        this.size = this.getSize();
        if (this.size === 1) {
            this.tail = null;
        }
    };
    LList.prototype.retainAll = function (array) {
        var current = this.root;
        var prev = null;
        while (current) {
            if (!array.includes(current.value)) {
                if (current.next !== null) {
                    current.value = current.next.value;
                    current.next = current.next.next;
                }
                else {
                    if (prev === null) {
                        this.root = null;
                        this.tail = null;
                        current = null;
                    }
                    if (prev !== null) {
                        prev.next = null;
                        current = prev;
                    }
                }
            }
            else {
                prev = current;
                current = current.next;
            }
        }
        this.size = this.getSize();
        if (this.size === 1) {
            this.tail = null;
        }
    };
    LList.prototype.reverse = function () {
        var arr = this.toArray();
        if (arr.length < 1) {
            return;
        }
        this.clear();
        var result = [];
        for (var i = arr.length - 1; i >= 0; i--) {
            result[arr.length - 1 - i] = arr[i];
        }
        for (var i = 0; i < result.length; i++) {
            this.add(result[i]);
        }
    };
    LList.prototype.set = function (value, index) {
        var current = this.root;
        var counter = 0;
        while (counter < this.size) {
            if (counter === index) {
                current.value = value;
            }
            current = current.next;
            counter++;
        }
    };
    LList.prototype.sort = function () {
        var arr = doSort(this.toArray());
        function doSort(arr) {
            if (arr.length <= 1) {
                return arr;
            }
            var pivot = arr[0];
            var left = [];
            var right = [];
            for (var i = 1; i < arr.length; i++) {
                if (arr[i] < pivot) {
                    left[left.length] = arr[i];
                }
                else {
                    right[right.length] = arr[i];
                }
            }
            return doSort(left).concat(pivot, doSort(right));
        }
        this.clear();
        for (var i = 0; i < arr.length; i++) {
            this.add(arr[i]);
        }
    };
    LList.prototype.toArray = function () {
        var result = [];
        var current = this.root;
        while (current) {
            result[result.length] = current.value;
            current = current.next;
        }
        return result;
    };
    LList.prototype.toString = function () {
        var result = '';
        var current = this.root;
        while (current) {
            result = result + '' + current.value;
            current = current.next;
        }
        return result;
    };
    return LList;
}());
exports.LList = LList;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
