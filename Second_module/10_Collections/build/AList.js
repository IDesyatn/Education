"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AList = void 0;
var AList = /** @class */ (function () {
    function AList() {
        this.array = [];
        this.size = 0;
    }
    AList.prototype.add = function (item) {
        this.array[this.size] = item;
        this.size++;
    };
    AList.prototype.clear = function () {
        this.array.length = 0;
        this.size = 0;
        return this.array;
    };
    AList.prototype.contains = function (item) {
        for (var i = 0; i < this.size; i++) {
            var element = this.array[i];
            if (element === item) {
                return true;
            }
        }
        return false;
    };
    AList.prototype.get = function (index) {
        return this.array[index];
    };
    AList.prototype.getSize = function () {
        return this.size;
    };
    AList.prototype.halfReverse = function () {
        var oldArray = this.array;
        var firstPartLen = Math.floor(oldArray.length / 2);
        var secondPartLen = oldArray.length - firstPartLen;
        var newArr = [];
        for (var i = 0; i < secondPartLen; i++) {
            newArr[i] = oldArray[i + firstPartLen];
        }
        for (var i = 0; i < firstPartLen; i++) {
            newArr[i + secondPartLen] = oldArray[i];
        }
        return newArr;
    };
    AList.prototype.maxIndex = function () {
        var max;
        for (var i = 0; i < this.size; i++) {
            if (i === 0) {
                max = i;
            }
            if (max < this.array[i]) {
                max = i;
            }
        }
        return max;
    };
    AList.prototype.minIndex = function () {
        var min;
        for (var i = 0; i < this.size; i++) {
            if (i === 0) {
                min = i;
            }
            if (min > this.array[i]) {
                min = i;
            }
        }
        return min;
    };
    AList.prototype.maxValue = function () {
        var max = this.array[0];
        for (var i = 0; i < this.array.length; i++) {
            if (max < this.array[i]) {
                max = this.array[i];
            }
        }
        return max;
    };
    AList.prototype.minValue = function () {
        var min = this.array[0];
        for (var i = 0; i < this.array.length; i++) {
            if (min > this.array[i]) {
                min = this.array[i];
            }
        }
        return min;
    };
    AList.prototype.print = function () {
        for (var i = 0; i < this.size; i++) {
            console.log(this.array[i]);
        }
        return this.array;
    };
    AList.prototype.remove = function (item) {
        var oldArray = this.array;
        this.array = [];
        this.size = 0;
        var returnValue;
        for (var i = 0; i < oldArray.length; i++) {
            var element = oldArray[i];
            if (element !== item) {
                this.add(element);
            }
            else {
                returnValue = element;
            }
        }
        return returnValue;
    };
    AList.prototype.removeAll = function (items) {
        var oldArray = this.array;
        for (var i = 0; i < oldArray.length; i++) {
            for (var j = 0; j < items.length; j++) {
                if (oldArray[i] === items[j]) {
                    oldArray[i] = undefined;
                    this.size--;
                }
            }
        }
        return oldArray;
    };
    AList.prototype.retainAll = function (items) {
        var oldArray = this.array;
        for (var i = 0; i < oldArray.length; i++) {
            var checker = false;
            for (var j = 0; j < items.length; j++) {
                var innerItem = items[j];
                if (oldArray[i] === innerItem) {
                    checker = true;
                    break;
                }
            }
            if (!checker) {
                oldArray[i] = undefined;
                this.size--;
            }
        }
        return oldArray;
    };
    AList.prototype.reverse = function () {
        var oldArray = this.array;
        var newArr = [];
        for (var i = 0; i < oldArray.length; i++) {
            newArr[i] = oldArray[oldArray.length - i - 1];
        }
        return newArr;
    };
    AList.prototype.set = function (item, index) {
        var oldArray = this.array;
        this.array = [];
        this.size = 0;
        if (index < 0) {
            console.log(false);
        }
        for (var i = 0; i < oldArray.length; i++) {
            var element = oldArray[i];
            if (i === index) {
                this.add(item);
            }
            else {
                this.add(element);
            }
        }
        return this.array;
    };
    AList.prototype.sort = function () {
        var oldArray = this.array;
        for (var i = 0, endI = oldArray.length - 1; i < endI; i++) {
            var wasSwap = false;
            for (var j = 0, endJ = endI - i; j < endJ; j++) {
                if (oldArray[j] > oldArray[j + 1]) {
                    var swap = oldArray[j];
                    oldArray[j] = oldArray[j + 1];
                    oldArray[j + 1] = swap;
                    wasSwap = true;
                }
            }
            if (!wasSwap)
                break;
        }
        return oldArray;
    };
    AList.prototype.toArray = function () {
        return this.array;
    };
    AList.prototype.toString = function () {
        var oldArray = this.array;
        var str = '';
        for (var i = 0; i < oldArray.length; i++) {
            str += oldArray[i];
        }
        return str;
    };
    return AList;
}());
exports.AList = AList;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
