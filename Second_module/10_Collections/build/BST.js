"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BST = void 0;
var Node = /** @class */ (function () {
    function Node(value) {
        this.value = value;
        this.right = null;
        this.left = null;
    }
    return Node;
}());
var BST = /** @class */ (function () {
    function BST() {
        this.root = null;
    }
    BST.prototype.clear = function () {
        this.root = null;
    };
    BST.prototype.height = function () {
        if (this.root === null) {
            return 0;
        }
        function counterH(value, height) {
            if (value.right === null && value.left === null) {
                return height;
            }
            if (value.right && value.left) {
                return Math.max(counterH(value.right, height + 1), counterH(value.left, height + 1));
            }
            else if (value.right === null) {
                return counterH(value.left, height + 1);
            }
            else {
                return counterH(value.right, height + 1);
            }
        }
        return counterH(this.root, 1);
    };
    BST.prototype.init = function (array) {
        for (var i = 0; i < array.length; i++) {
            this.insert(array[i]);
        }
    };
    BST.prototype.insert = function (value) {
        if (this.root === null) {
            this.root = new Node(value);
        }
        else {
            var current = this.root;
            while (current) {
                if (current.value === value) {
                    if (current.right === null) {
                        current.right = new Node(value);
                        return;
                    }
                    else {
                        current = current.right;
                    }
                }
                if (current.value < value) {
                    if (current.right === null) {
                        current.right = new Node(value);
                        return;
                    }
                    else {
                        current = current.right;
                    }
                }
                if (current.value > value) {
                    if (current.left === null) {
                        current.left = new Node(value);
                        return;
                    }
                    else {
                        current = current.left;
                    }
                }
            }
        }
    };
    BST.prototype.leaves = function () {
        function counter(value) {
            if (value === null) {
                return 0;
            }
            if (value.right === null && value.left === null) {
                return 1;
            }
            return counter(value.right) + counter(value.left);
        }
        return counter(this.root);
    };
    BST.prototype.maxNode = function () {
        var value = this.root;
        if (value === null) {
            return undefined;
        }
        while (value) {
            if (value.right === null) {
                return value.value;
            }
            value = value.right;
        }
    };
    BST.prototype.minNode = function () {
        var value = this.root;
        if (value === null) {
            return undefined;
        }
        while (value) {
            if (value.left === null) {
                return value.value;
            }
            value = value.left;
        }
    };
    BST.prototype.nodes = function () {
        var arr = this.toArray();
        return arr.length;
    };
    BST.prototype.print = function (node, callback) {
        callback(this.root);
    };
    BST.prototype.remove = function (value) {
        if (value === null) {
            return undefined;
        }
        this.root = removeNode(this.root, value);
        function removeNode(current, value) {
            if (current === null) {
                return null;
            }
            if (value < current.value) {
                current.left = removeNode(current.left, value);
            }
            else if (value > current.value) {
                current.right = removeNode(current.right, value);
            }
            else {
                if (current.left == null && current.right == null) {
                    current = null;
                    return current;
                }
                else if (current.left == null) {
                    current = current.right;
                    return current;
                }
                else if (current.right == null) {
                    current = current.left;
                    return current;
                }
                else {
                    current.right = removeNode(currentValue(current.right).right, currentValue(current.right).value);
                    return current;
                }
            }
            return current;
        }
        function currentValue(value) {
            while (value && value.left) {
                value = value.left;
            }
            return value;
        }
        if (this.root !== null) {
            return this.root.value;
        }
        else {
            return null;
        }
    };
    BST.prototype.reverse = function () {
        var value = this.root;
        changeArr(value);
        function changeArr(current) {
            if (current === null) {
                return null;
            }
            if (current.left && current.right) {
                var right = current.right;
                current.right = current.left;
                current.left = right;
                changeArr(current.right);
                changeArr(current.left);
            }
            else if (current.left === null) {
                current.left = current.right;
                current.right = null;
                changeArr(current.left);
            }
            else if (current.right === null) {
                current.right = current.left;
                current.left = null;
                changeArr(current.right);
            }
        }
    };
    BST.prototype.search = function (value) {
        var current = this.root;
        if (current === null) {
            return undefined;
        }
        while (current) {
            if (current.value === value) {
                return current.value;
            }
            if (current.value > value) {
                current = current.left;
            }
            if (current.value < value) {
                current = current.right;
            }
        }
        return undefined;
    };
    BST.prototype.size = function () {
        var arr = this.toArray();
        return arr.length;
    };
    BST.prototype.toArray = function () {
        var result = [];
        pushArray(this.root, result);
        function pushArray(current, result) {
            if (current) {
                pushArray(current.left, result);
                result.push(current.value);
                pushArray(current.right, result);
            }
        }
        return result;
    };
    BST.prototype.width = function () {
        var value = 0;
        var maxValue = 0;
        if (this.root === null) {
            return 0;
        }
        if (this.root.right === null && this.root.left === null) {
            return 1;
        }
        for (var i = 1; i <= this.height(); i++) {
            value = counterWidth(this.root, i);
            if (value > maxValue) {
                maxValue = value;
            }
        }
        function counterWidth(current, level) {
            if (current === null) {
                return 0;
            }
            if (level === 1) {
                return 1;
            }
            return counterWidth(current.right, level - 1) + counterWidth(current.left, level - 1);
        }
        return maxValue;
    };
    return BST;
}());
exports.BST = BST;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
