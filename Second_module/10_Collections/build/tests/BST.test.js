"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BST_1 = require("../BST");
var testTree;
beforeEach(function () {
    testTree = new BST_1.BST();
});
describe('Tests for BSTree', function () {
    test('test for method init', function () {
        testTree.init([8, 10, 2, 3]);
        expect(testTree.toArray()).toStrictEqual([2, 3, 8, 10]);
    });
    test('test for method clear', function () {
        testTree.init([8, 10, 2, 3]);
        testTree.clear();
        expect(testTree.toArray()).toStrictEqual([]);
    });
    test('test for method height (empty)', function () {
        expect(testTree.height()).toBe(0);
    });
    test('test for method height (should return height size)', function () {
        testTree.init([8, 10, 2, 3]);
        expect(testTree.height()).toBe(3);
    });
    test('test for method insert', function () {
        testTree.init([8, 10, 2, 3]);
        testTree.insert(9);
        expect(testTree.toArray()).toStrictEqual([2, 3, 8, 9, 10]);
    });
    test('test for method insert (5,5)', function () {
        testTree.init([5]);
        testTree.insert(5);
        expect(testTree.toArray()).toStrictEqual([5, 5]);
    });
    test('test for method leaves', function () {
        testTree.init([8, 10, 2, 3]);
        expect(testTree.leaves()).toBe(2);
    });
    test('test for method maxNode', function () {
        testTree.init([8, 10, 2, 3]);
        expect(testTree.maxNode()).toBe(10);
    });
    test('test for method minNode', function () {
        testTree.init([8, 10, 2, 3]);
        expect(testTree.minNode()).toBe(2);
    });
    test('test for method nodes', function () {
        testTree.init([8, 10, 2, 3]);
        expect(testTree.nodes()).toBe(4);
    });
    test('test for method print', function () {
        testTree.init([8, 10, 2, 3, 6, 12]);
        expect(testTree.toArray()).toStrictEqual([2, 3, 6, 8, 10, 12]);
    });
    test('test for method remove (null)', function () {
        testTree.init([8, 10, 2, 3, 6, 12]);
        expect(testTree.remove(null)).toBeUndefined();
    });
    test('test for method remove (empty)', function () {
        testTree.init([]);
        expect(testTree.remove(1)).toBe(null);
    });
    test('test for method remove (should return result)', function () {
        testTree.init([8, 10, 2, 3, 6, 12]);
        expect(testTree.remove(1)).toBe(8);
    });
    test('should remove [2,3,4] current.left == null', function () {
        testTree.init([2, 3, 4]);
        expect(testTree.remove(3)).toBe(2);
    });
    test('should remove [2,3,4] current.left == null', function () {
        testTree.init([2, 3, 4]);
        expect(testTree.remove(2)).toStrictEqual(3);
    });
    test('should remove, current.left == null', function () {
        testTree.init([8, 10, 2, 3, 6, 12]);
        expect(testTree.remove(3)).toBe(8);
    });
    test('should remove', function () {
        testTree.init([8, 10, 2, 3, 6, 12]);
        expect(testTree.remove(8)).toBe(8);
    });
    test('test for method reverse (left)', function () {
        testTree.init([8, 10, 2, 3, 6, 12]);
        testTree.reverse();
        expect(testTree.toArray()).toStrictEqual([12, 10, 8, 6, 3, 2]);
    });
    test('test for method reverse (right)', function () {
        testTree.init([5, 2]);
        testTree.reverse();
        expect(testTree.toArray()).toStrictEqual([5, 2]);
    });
    test('test for method reverse (undefined)', function () {
        testTree.reverse();
        expect(testTree.reverse()).toBeUndefined();
    });
    test('test for method search right', function () {
        testTree.init([8, 10, 2, 3, 6, 12]);
        expect(testTree.search(12)).toBe(12);
    });
    test('test for method search left', function () {
        testTree.init([8, 10, 2, 3]);
        expect(testTree.search(2)).toBe(2);
    });
    test('test for method search undefined', function () {
        testTree.init([5, 2]);
        expect(testTree.search(12)).toBeUndefined();
    });
    test('test for method size', function () {
        testTree.init([8, 10, 2, 3, 6, 12]);
        expect(testTree.size()).toBe(6);
    });
    test('test for method width', function () {
        testTree.init([8, 10, 2, 3, 6, 12]);
        expect(testTree.width()).toBe(2);
    });
    test('test for method width (arr === null)', function () {
        expect(testTree.width()).toBe(0);
    });
    test('test for method width (1 el in arr)', function () {
        testTree.init([8]);
        expect(testTree.width()).toBe(1);
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
